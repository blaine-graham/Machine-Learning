# Name: Blaine Graham
# date: 2/1/2021
# assignment 1



from matplotlib import pyplot as plt
import numpy as np
from scipy.interpolate import make_interp_spline, BSpline
import sklearn
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split
import matplotlib.patches as mpatches
from random import seed
from random import random

#seeding random()
seed(1)


# First Graph, built from the correlations website

# data from website, Doctorates awarded and revenue from arcades
Dr_y = np.array([861, 830, 809, 867, 948, 1129, 1453, 1656, 1787, 1611])
year_x = np.array([2000,2001,2002,2003,2004,2005,2006,2007,2008,2009])
Rev_y = [1.196, 1.176, 1.269, 1.24, 1.307, 1.435, 1.601, 1.654, 1.803, 1.734]

# create figure for dataset 1
fig, ax1 = plt.subplots()

# twin the common X axis
ax2 = ax1.twinx()


#smooth graphs
x_smooth = np.linspace(year_x.min(), year_x.max(), 200)
spl = make_interp_spline(year_x, Dr_y, k=3)
Dr_smooth = spl(x_smooth)
spl2 = make_interp_spline(year_x, Rev_y, k=3)
Rev_smooth = spl2(x_smooth)

#add doctorate data to graph
curve1 = ax1.plot(x_smooth, Dr_smooth, label='Doctorates in CS', color = 'k')

#add revenue data to graph
curve2 = ax2.plot(x_smooth, Rev_smooth, label = 'Revenue from Arcades', color = 'r')

#set range for axes
ax1.set_xlim([2000, 2009])
ax1.set_ylim([500, 2000])
ax2.set_ylim([1.0, 2.0])

# Labels for graph and Axes
red_line = mpatches.Patch(color='red', label='Revenue')
black_line = mpatches.Patch(color='black', label = 'Doctorates')
plt.legend(handles=[red_line, black_line])
plt.title('Computer Science Doctorates Awarded in US    and    Total Revenue Generated by Arcades')
ax1.set_ylabel('Doctorates awarded')
ax1.set_xlabel('year')
ax2.set_ylabel('Revenue in Billions')

# draw graph
plt.show()





# pair_plot of the iris dataset

#load in the iris dataset
iris = sklearn.datasets.load_iris()

x_train, x_test, y_train, y_test = train_test_split(iris['data'], iris['target'], random_state=0)

# create figure, set the layout
fig2, pair_plot = plt.subplots(4, 4)                             
fig2.set_figwidth(10)
fig2.set_figheight(10)
fig2.tight_layout()
plt.autoscale()



# iterators
i = 0
j = 0

# these loops will iterate through the sub plots, labeling axes and constructing scatter plots and histograms
for i in range(4):
  for j in range(4):
    if i == 0:
      pair_plot[i,j].set_ylabel('Sepal Length (cm)')
    if i == 1:
      pair_plot[i,j].set_ylabel('Sepal Width (cm)')   
    if i == 2:
      pair_plot[i,j].set_ylabel('Petal Length (cm)')
    if i == 3:
      pair_plot[i,j].set_ylabel('Petal Width (cm)')
    if j == 0:
      pair_plot[i,j].set_xlabel('Sepal Length (cm)')
    if j == 1:
      pair_plot[i,j].set_xlabel('Sepal Width (cm)')
    if j == 2:
      pair_plot[i,j].set_xlabel('Petal Length (cm)')
    if j == 3:
      pair_plot[i,j].set_xlabel('Petal Width (cm)')
    if i == j:
      pair_plot[i,j].hist(x_train[:,i], bins=20)
    else:
      pair_plot[i,j].scatter(x_train[:,j], x_train[:,i], c=y_train, cmap=plt.cm.Paired)

# this sections creates a single legend for figure2
blue_stuff = mpatches.Patch(color='lightblue', label = 'Iris Setosa')
tan_stuff = mpatches.Patch(color='navajowhite', label = 'Iris Versicolo')
brown_stuff = mpatches.Patch(color='peru', label = 'Iris Virginica')
fig2.legend(handles=[blue_stuff, tan_stuff, brown_stuff], loc='lower center', bbox_to_anchor=(1,1))

# show the figure
plt.show()







# overlapping data subplots
#read from CSV file, couldn't get this to work without panda but all the plotting is done in matplotlib
df = pd.read_csv('https://raw.githubusercontent.com/pratoolbharti/NIU/master/Applied_Machine_Learning_S20/Homework-1/mpg.csv')

# create figure
fig3, overlap= plt.subplots(2,2)
fig3.set_figwidth(10)
fig3.set_figheight(10)
colors = {'4':'black', 'f':'navajowhite', 'r':'lightblue'}

# label axes and plots for the figure
overlap[0,0].set_xlabel('Displacement')
overlap[0,0].set_ylabel('Fuel economy (mpg)')
overlap[1,0].set_xlabel('Displacement')
overlap[1,0].set_ylabel('Fuel economy (mpg)')
overlap[1,1].set_xlabel('Displacement')
overlap[1,1].set_ylabel('Fuel economy (mpg)')
overlap[0,1].set_xlabel('Displacement')
overlap[0,1].set_ylabel('Fuel economy (mpg)')
overlap[0,0].set_title('standard')
overlap[0,1].set_title('transparency added')
overlap[1,0].set_title('jitter added')
overlap[1,1].set_title('too much jitter')

# this section creates a single legend for figure 3
blue_stuff = mpatches.Patch(color='lightblue', label = 'RWD')
tan_stuff = mpatches.Patch(color='navajowhite', label = 'FWD')
black_stuff = mpatches.Patch(color='black', label = '4WD')
fig3.legend(handles=[tan_stuff, blue_stuff, black_stuff], loc='lower center')

# first subplot, standard
overlap[0,0].scatter(df.displ, df.cty, c=df.drv.apply(lambda x: colors[x]))

# second subplot, add transparency
overlap[0,1].scatter(df.displ, df.cty, c=df.drv.apply(lambda x: colors[x]), alpha=0.5)


# third subplot, adding jitter
# the next line will generate a random float between 0 and 1 and add to the value of 'cty' for each piece of data
df['cty'] = df['cty'].apply(lambda x: x + random())
overlap[1,0].scatter(df.displ, df.cty, c=df.drv.apply(lambda x: colors[x]), alpha=0.5)

# fourth subplot, too much jitter
# add more random jitter to 'cty', and some jitter to 'displ' as well
df['cty'] = df['cty'].apply(lambda x: x + random())
df['cty'] = df['cty'].apply(lambda x: x + random())
df['displ'] = df['displ'].apply(lambda x: x + random())
df['displ'] = df['displ'].apply(lambda x: x + random())
overlap[1,1].scatter(df.displ, df.cty, c=df.drv.apply(lambda x: colors[x]), alpha=0.5)

# show figure 3
plt.show()